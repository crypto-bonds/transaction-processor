#!/usr/bin/env python3
#
# Copyright 2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

from glob import glob
import os
import re
import tempfile
from os.path import dirname as DIRNAME
import sys

from grpc.tools.protoc import main as _protoc

JOIN = os.path.join
TOP_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


def protoc_python(src_dir, base_dir, pkg):
    # 1. Create output package directory
    pkg_dir = JOIN(TOP_DIR, base_dir, pkg)
    os.makedirs(pkg_dir, exist_ok=True)

    # 2. 'touch' the __init__.py file if the output directory exists
    init_py = JOIN(pkg_dir, "__init__.py")
    if not os.path.exists(init_py):
        with open(init_py, "w") as fd:
            pass  # Just need it to exist

    # 3. Create a temp directory for building
    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp_pkg_dir = JOIN(tmp_dir, pkg)
        os.makedirs(tmp_pkg_dir)

        # 4. Get a list of all .proto files to build
        cwd = os.getcwd()
        os.chdir(src_dir)
        proto_files = glob("*.proto")
        os.chdir(cwd)

        # 5. Copy protos to temp dir and fix imports
        for proto in proto_files:
            src = JOIN(src_dir, proto)
            dst = JOIN(tmp_pkg_dir, proto)
            with open(src, encoding='utf-8') as fin:
                with open(dst, "w", encoding='utf-8') as fout:
                    src_contents = fin.read()
                    fixed_contents = fix_import(src_contents, pkg)
                    fout.write(fixed_contents)

        # 6. Compile protobuf files
        _protoc([
            __file__,
            "-I=%s" % tmp_dir,
            "--python_out=%s" % JOIN(TOP_DIR, base_dir),
        ] + glob("%s/*.proto" % tmp_pkg_dir))


def protoc_go(src_dir, base_dir, pkg):
    # 1. Get a list of all .proto files to build
    cwd = os.getcwd()
    os.chdir(src_dir)
    proto_files = glob("*.proto")
    os.chdir(cwd)

    # 2. Create a temp directory for building
    with tempfile.TemporaryDirectory() as tmp_dir:
        defer = []

        # 3. In order to have each protobuf file in its own namespace,
        # directories need to be created for all of them and the .proto file
        # copied in
        for proto_file in proto_files:
            proto = proto_file[:-6]

            sub_pkg = JOIN(pkg, proto)
            tmp_pkg_dir = JOIN(tmp_dir, sub_pkg + "_pb2")
            os.makedirs(tmp_pkg_dir)

            src = JOIN(src_dir, proto_file)
            dst = JOIN(tmp_pkg_dir, proto_file)
            with open(src, encoding='utf-8') as fin:
                with open(dst, "w", encoding='utf-8') as fout:
                    src_contents = fin.read()
                    fixed_contents = fix_import(src_contents, pkg, sub_dir=True)
                    fout.write(fixed_contents)

            # Need to defer until the whole directory is setup
            defer.append([
                __file__,
                "-I=%s" % tmp_dir,
                "--go_out=%s" % JOIN(TOP_DIR, base_dir),
                "%s" % dst
            ])

        for args in defer:
            _protoc(args)


def fix_import(contents, pkg, sub_dir=False):
    pattern = r'^import "(.*)\.proto\"'
    if sub_dir:
        template = r'import "%s/\1_pb2/\1.proto"'
    else:
        template = r'import "%s/\1.proto"'

    return re.sub(
        pattern,
        lambda match: match.expand(template) % pkg,
        contents,
        flags=re.MULTILINE
    )


def protoc(src_dir, base_dir, pkg, language="python"):
    if language == "python":
        protoc_python(src_dir, base_dir, pkg)
    elif language == "go":
        protoc_go(src_dir, base_dir, pkg)

def main(args=None):
    if args is None:
        args = sys.argv[1:]
    proto_dir = JOIN(TOP_DIR, "protos")
    protoc(proto_dir, "rpc", "tests/protobuf")
    if "go" in args:
        protoc(proto_dir, "common/src", "protobuf", "go")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
